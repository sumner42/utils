#!/usr/bin/perl
sub usage() { print STDERR
'########################################################################
# FILE: newscript
#
# PURPOSE: Create a new perl or bash script file with boilerplate
#
# USAGE: newscript [-l lang][-p purpose][-u parms] name
#
# PARAMETERS:
#   -f          Force writing if file exists. Default is to quit.
#   -l lang     Script language (perl or bash). Default is perl.
#   -p purpose  Purpose text describing why the script exists.
#   -u parms    Usage text describing parameters.
#   -v          Verbose mode.
#   name        Name of script to create. 
#
# NOTES:
#   Script file is created with working examples of 
#   - Retrieving the running script name
#   - Handling of command line options and arguments
#
# EXAMPLES:
#   newscript myscript
#   newscript myscript -p "Do something" -u "-a -b arg1"
#
# MODIFICATION HISTORY:
#   2020/09/18, SK Hushing III. Original issue for Fedora.
########################################################################
'; exit }

use strict;
use warnings;
use Getopt::Long;
Getopt::Long::Configure("bundling");

#----[ Misc initializations ]----#
my $script = `basename $0`; chomp($script);
my $date = `date +%Y/%m/%d`; chomp($date);

#----[ Handle command line options ]----#
my $force = 0;
my $lang = "perl";
my $purpose = "Do something cool";
my $parms = "-a string -b integer -c arg1";
my $sname = "NewScript.pl";
my $v = 0;
GetOptions (
    "f"   => \$force,
    "l=s" => \$lang,
    "p=s" => \$purpose,
    "u=s" => \$parms,
    "v+"  => \$v,
) or die ("$script: * Unsupported option\n");
usage() if scalar(@ARGV) && $ARGV[0] eq "help";

#----[ Handle command line arguments ]----#
my $narg = @ARGV;
die "$script: * No script name provided\n" if scalar(@ARGV) < 1;
$sname = $ARGV[0];

#----[ Create the new perl script ]----#
if ($lang eq "perl" || $lang eq "p") {
    newperl($sname);
} elsif ($lang eq "bash" || $lang eq "b") {
    newbash($sname);
} else {
    die "$script: * Unsupported language ($lang)\n";
}

#----[ Subroutine to create the perl script ]----#
sub newperl {
    my ($perl_fn) = @_;
    print STDERR "Creating perl script $perl_fn\n";
    # print <<"EOF";
    open(SCRIPT_FILE, ">$perl_fn");
    print SCRIPT_FILE <<"EOF";
#!/usr/bin/perl
sub usage() { print STDERR
'########################################################################
# FILE: $perl_fn
#
# PURPOSE: $purpose
#
# USAGE: $perl_fn $parms
#
# PARAMETERS: (replace this example with pertinent info)
#   -a option_a  Explain how the -a option_a string works here
#   -b option_b  Explain how -b option_b integer works here
#   -c           Explain how the -c switch works here
#   -v           Verbose mode
#   arg1         Explain the expected values of arg1 here
#
# EXAMPLE: $perl_fn -v -a hello -b 23 -c testing
#
# MODIFICATION HISTORY:
#   '$date', SK Hushing III. Original issue for Fedora.
########################################################################
'; exit }

use strict;
use warnings;
use Getopt::Long;
Getopt::Long::Configure("bundling");

#----[ Initializations ]----#
my \$script = \`basename \$0\`; chomp(\$script);

#----[ Handle command line options ]----#
my \$string_option_a = "";
my \$integer_option_b = 0;
my \$switch_option_c = 0;
my \$arg1 = "";
my \$v = 0;
GetOptions (
    "a=s" => \\\$string_option_a,
    "b=i" => \\\$integer_option_b,
    "c" => \\\$switch_option_c,
    "v+"  => \\\$v,
) or die ("$script: * Unsupported option\\n");
usage() if scalar(\@ARGV) > 0 && \$ARGV[0] eq "help";

#----[ Handle command line arguments ]----#
my \$narg = \@ARGV;
if (scalar(\@ARGV) < 1) {
    print STDERR "\$script: * Argument(s) missing\\n";
    usage();
}
\$arg1 = \$ARGV[0];

#----[ Print some variables for understanding ]----#
print "string_option_a: \$string_option_a\\n";
print "integer_option_b: \$integer_option_b\\n";
print "switch_option_c: \$switch_option_c\\n";
print "verbose: \$v\\n";
print "arg1: \$arg1\\n";

#----[ Body of script ]----#

EOF
    close(SCRIPT_FILE);
    system("chmod +x $perl_fn");
}

#----[ Subroutine to create the bash script ]----#
sub newbash {
    my ($bash_fn) = @_;
    print STDERR "Creating bash script $bash_fn\n";
    # print <<"EOF";
    open(SCRIPT_FILE, ">$bash_fn");
    print SCRIPT_FILE <<"EOF";
#!/usr/bin/bash
usage() { echo "\\
########################################################################
# FILE: $bash_fn
#
# PURPOSE: $purpose
#
# USAGE: $bash_fn $parms
#
# PARAMETERS: (replace this example with pertinent info)
#   -a option_a  Explain how the -a option_a string works here
#   -b option_b  Explain how -b option_b integer works here
#   -c           Explain how -c switch works here
#   -v           Verbose mode
#   arg1         Explain the expected values of arg1 here
#
# EXAMPLE: $bash_fn -v -a hello -b 23 -c testing
#
# MODIFICATION HISTORY:
#   '$date', SK Hushing III. Original issue for Fedora.
########################################################################" >&2
exit; }

#----[ Initializations ]----#
script=\`basename \$0\`

#----[ Handle command line options ]----#
string_option_a=""
integer_option_b=0
switch_option_c=0
v=0
while getopts 'a:b:cv' opt; do
    case \$opt in
    a) string_option_a=\$OPTARG;;
    b) integer_option_b=\$OPTARG;;
    c) switch_option_c=1;;
    v) v=\$((v + 1));;
    \\\?) usage;;
    esac
done
shift "\$((OPTIND - 1))"
if [ \"\$1\" = \"help\" ]; then usage; fi

#----[ Handle command line arguments ]----#
arg1=\$1

#----[ Print some variables for understanding ]----#
echo "string_option_a: \$string_option_a"
echo "integer_option_b: \$integer_option_b"
echo "switch_option_c: \$switch_option_c"
echo "verbose: \$v"
echo "arg1: \$arg1"

#----[ Body of script ]----#

EOF
    close(SCRIPT_FILE);
    system("chmod +x $bash_fn");
}
