#!/usr/bin/perl
sub usage() { print STDERR
'########################################################################
# FILE: Ping
#
# PURPOSE: Ping a host or IP address and return a single status line
#
# USAGE: Ping -v host|addr
#
# PARAMETERS: 
#   -w nsec      Number of seconds to wait for response. Default is 1.
#   -v           Verbose mode. Kind of defaults the purpose. 
#   host|addr    The hostname or IP address to ping.
#
# EXAMPLE: Ping -v 10.0.0.1
#
# NOTES:
#   Sun ping worked so cleanly, I had to emulate it on Linux.
#
# MODIFICATION HISTORY:
#   2020/09/20, SK Hushing III. Original issue for Fedora.
########################################################################
'; exit }

use strict;
use warnings;
use Getopt::Long;
Getopt::Long::Configure("bundling");

#----[ Initializations ]----#
my $script = `basename $0`; chomp($script);

#----[ Handle command line options ]----#
my $v = 0;
my $nsec = 1;
GetOptions (
    "w=i"  => \$nsec,
    "v+"  => \$v,
) or die ("$script: * Unsupported option\n");
usage() if scalar(@ARGV) > 0 && $ARGV[0] eq "help";

#----[ Handle command line arguments ]----#
my $theIP = "";
my $narg = @ARGV;
if (scalar(@ARGV) < 1) {
    print STDERR "$script: * host or IP addr required\n";
    usage();
}
$theIP = $ARGV[0];

#----[ Body of script ]----#
print "$script: pinging $theIP\n" if $v;
system("ping -q -c 1 -W 1 $theIP >/dev/null 2>&1");
my $stat = $?;
print "stat: $stat\n" if $v;
if ($stat == 0) {
    print "$theIP is alive\n";
} else {
    print "$theIP no response after $nsec second wait\n";
}
exit $stat;
